% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multipartiteBM.R
\name{multipartiteBM}
\alias{multipartiteBM}
\title{Model selection and parameter estimation of MBM}
\usage{
multipartiteBM(list_Net, v_distrib = NULL, namesFG = NULL,
  v_Kmin = 1, v_Kmax = 10, v_Kinit = NULL, initBM = FALSE,
  save = FALSE, verbose = TRUE, nbCores = NULL, maxiterVE = NULL)
}
\arguments{
\item{list_Net}{A list of networks (defined via the function defineNetwork) i.e. multipartite networks}

\item{v_distrib}{Type of proababilistic distributions in each network : if 0/1 then Bernoulli, if counting then Poisson. My default  = Bernoulli.
Must give a vector whose length is the number of networks in list_Net}

\item{namesFG}{Names of functional groups (FG) (must correspond to names in list_Net)}

\item{v_Kmin}{A vector of minimal number of blocks per functional group provided in the same order as in namesFG.
v_Kmin can be a single value (same minimal number of blocks for all the FGs) or a vector with size equal to the number of FGs
If v_Kmin is not specified,  v_Kmin = 1.}

\item{v_Kmax}{A vector of maximal number of blocks per functional group provided in the same order as in namesFG.
v_Kmin can be a single value (same minimal number of blocks for all the FGs) or a vector with size equal to the number of FGs
If v_Kmin is not specified,  v_Kmin = 1.}

\item{v_Kinit}{A vector of initial number of blocks per functional group provided in the same order as in namesFG.
if v_Kinit is not specified, then several initialisations will be used :  v_Kinit = v_Kmin, and v_Kinit = floor((v_Kmax + v_Kmin)/2)}

\item{initBM}{If initBM   =  TRUE, then an aditional initialisation is done using simple LBM or SBM on each network separatly. The default value is FALSE}

\item{save}{Set to TRUE to save the estimated parameters for intermediate visited models. Otherwise, only the better model (in ICL sense) is the ouput}

\item{verbose}{Set to TRUE to display the current step of the search algorithm}

\item{nbCores}{Number or cores used for the estimation. Not parallelized on windows. By default : half of the cores}

\item{maxiterVE}{Maximum number of iterations if the VE step of the VEM algorithm. By default  = 100}
}
\value{
a list of estimated parameters for the different models ordered by decreasing ICL. If save=FALSE, the length is of length 1
}
\description{
Select the number of blocks per functional group using a stepwise search and estimate parameters
}
\examples{
v_K <- c(3,2,2)
n_FG <- 3
list_pi <- vector("list", 3);
list_pi[[1]] <- c(0.4,0.3,0.3); list_pi[[2]] <- c(0.6,0.4); list_pi[[3]]  <- c(0.6,0.4)
E  = rbind(c(1,2),c(2,3),c(2,2))
v_distrib <- c('bernoulli','poisson','poisson')
typeInter <- c( "inc", "inc"  ,  "adj" )
list_theta <- list()
list_theta[[1]] <- matrix(rbeta(v_K[E[1,1]] * v_K[E[1,2]],1.5,1.5 ),nrow = v_K[E[1,1]], ncol = v_K[E[1,2]])
list_theta[[2]] <- matrix(rgamma(v_K[E[2,1]] * v_K[E[2,2]],7.5,1 ),nrow = v_K[E[2,1]], ncol = v_K[E[2,2]])
list_theta[[3]] <- matrix(rgamma(v_K[E[3,1]] * v_K[E[3,2]],7.5,1 ),nrow = v_K[E[3,1]], ncol = v_K[E[3,2]])
list_theta[[3]] <- 0.5*(list_theta[[3]] + t(list_theta[[3]])) # symetrisation for network 3
v_NQ = c(100,50,40)
dataSim <-  rMBM(v_NQ ,E , typeInter, v_distrib, list_pi, list_theta, seed=NULL, namesFG= c('A','B','D'),keepClassif = FALSE)
list_Net <- dataSim$list_Net
res <- multipartiteBM(list_Net, v_distrib = c("bernoulli","poisson","poisson"), namesFG = NULL, v_Kmin = 1,v_Kmax = 10,v_Kinit = NULL,verbose = TRUE, save=FALSE, maxiterVE = NULL)
}
