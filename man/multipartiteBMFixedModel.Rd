% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multipartiteBMFixedModel.R
\name{multipartiteBMFixedModel}
\alias{multipartiteBMFixedModel}
\title{Model selection and estimation of multipartite blockmodels}
\usage{
multipartiteBMFixedModel(
  list_Net,
  v_distrib,
  namesFG,
  v_K,
  classifInit = NULL,
  nbCores = NULL,
  maxiterVE = NULL,
  maxiterVEM = NULL,
  verbose = TRUE
)
}
\arguments{
\item{list_Net}{A list of network (defined via the function DefineNetwork)}

\item{v_distrib}{Type of proababilistic distributions in each network : if 0/1 then bernoulli, if counting then poisson, gaussian or Zero Inflated Gaussian (ZIgaussian) My default  = Bernoulli.
Must give a vector whose length is the number of networks in list_Net}

\item{namesFG}{Names of functional groups (must correspond to names in listNet)}

\item{v_K}{A vector with the numbers of blocks per functional group}

\item{classifInit}{A list of initial classification for each functional group in the same order as in namesFG}

\item{nbCores}{Number or cores used for the estimation. Not parallelized on windows. By default : half of the cores}

\item{maxiterVE}{Maximum number of iterations in the VE step of the VEM algorithm. Default value  = 1000}

\item{maxiterVEM}{Maximum number of iterations of the VEM algorithm. Default value  = 1000}

\item{verbose}{Set to TRUE to display the current step of the search algorithm}
}
\value{
Estimated parameters and a classification
}
\description{
Estimate the parameters and give the clustering for given numbers of blocks
}
\examples{
set.seed(302718)
n_FG <- 2 #number of functional groups (FG)
namesFG <- c('A','B')
v_NQ <-  c(60,50) #size of each FG
v_K  <- c(3,2) #number of clusters in each functional group
list_pi = lapply(1:n_FG,function(q){v = rgamma(v_K[q],1,1); return(v/sum(v))})
typeInter <- c( "inc","diradj", "adj")
v_distrib <- c('gaussian','bernoulli','poisson')
E  <-  rbind(c(1,2),c(2,2),c(1,1))
list_theta <- list()
list_theta[[1]] <- list()
m1 <- rnorm(v_K[E[1,1]] * v_K[E[1,2]],7.5,4 )
v1 <- rgamma(v_K[E[1,1]] * v_K[E[1,2]],7.5,4 )
list_theta[[1]]$mean  <- matrix(m1,nrow = v_K[E[1,1]], ncol = v_K[E[1,2]] )
list_theta[[1]]$var  <-  matrix(v1,nrow = v_K[E[1,1]], ncol = v_K[E[1,2]] )
m2 <- rbeta(v_K[E[2,1]] * v_K[E[2,2]],2,2 )
list_theta[[2]] <- matrix(m2,nrow = v_K[E[2,1]], ncol = v_K[E[2,2]])
m3 <- rgamma(v_K[E[3,1]] * v_K[E[3,2]],6,2 )
list_theta[[3]] <- matrix((m3 + t(m3))/2,nrow = v_K[E[3,1]], ncol = v_K[E[3,2]])
list_Net <- rMBM(v_NQ ,E , typeInter, v_distrib, list_pi,
                list_theta, namesFG = namesFG)$list_Net
res_MBMsimu_fixed <- multipartiteBMFixedModel(list_Net,
                                              v_distrib,
                                              namesFG = namesFG,
                                              v_K = c(3,2),
                                              nbCores = 2)
}
